{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "WEEK 1 WELCOME TO COLAB",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AidenHall1/comp593/blob/main/WEEK%20ONE-LAB1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GJBs_flRovLc"
      },
      "source": [
        "## **Welcome to COMP 593!**\n",
        "\n",
        "For your first lab, we will experiment with running a script, and saving our project to our personal github repositories:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xn279PBwVnDj"
      },
      "source": [
        "##Installing Dependancies##\n",
        "\n",
        "Dependancies are routines, Objects, and methods that a project requires. We add Dependancies to our project in the form of **Libraries** when we want to unlock functionality that already exists, this could be as simple as file IO or as complex as fully fledged Machine Learning libraries. Libraries can be added to our project manually, by downloading them and placing them in our runtime enviornment, or using a **Package Manager** such as PIP."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-IWb3REjW5T0"
      },
      "source": [
        "Run the below code to download the **pyfiglet** library, which we will use to generate some ASCII art."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ARUZhh6MS7nA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "13d7f6ac-6bb9-4d0d-e868-a7b396f4ce2d"
      },
      "source": [
        "pip install pyfiglet\n"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pyfiglet\n",
            "  Downloading pyfiglet-0.8.post1-py2.py3-none-any.whl (865 kB)\n",
            "\u001b[?25l\r\u001b[K     |▍                               | 10 kB 19.7 MB/s eta 0:00:01\r\u001b[K     |▊                               | 20 kB 12.2 MB/s eta 0:00:01\r\u001b[K     |█▏                              | 30 kB 9.1 MB/s eta 0:00:01\r\u001b[K     |█▌                              | 40 kB 8.0 MB/s eta 0:00:01\r\u001b[K     |██                              | 51 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██▎                             | 61 kB 4.6 MB/s eta 0:00:01\r\u001b[K     |██▋                             | 71 kB 4.7 MB/s eta 0:00:01\r\u001b[K     |███                             | 81 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███▍                            | 92 kB 4.0 MB/s eta 0:00:01\r\u001b[K     |███▉                            | 102 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████▏                           | 112 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████▌                           | 122 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████                           | 133 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 143 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████▊                          | 153 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████                          | 163 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████▍                         | 174 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████▉                         | 184 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████▏                        | 194 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████▋                        | 204 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████                        | 215 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████▎                       | 225 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████▊                       | 235 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████                       | 245 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████▌                      | 256 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 266 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████▏                     | 276 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████▋                     | 286 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████                     | 296 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████▍                    | 307 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████▊                    | 317 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████                    | 327 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████▌                   | 337 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████▉                   | 348 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████████▎                  | 358 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████████▋                  | 368 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 378 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████▍                 | 389 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████▊                 | 399 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████████▏                | 409 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████████▌                | 419 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████████                | 430 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████████▎               | 440 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████████▋               | 450 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████               | 460 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████▍              | 471 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████▉              | 481 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████▏             | 491 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████▌             | 501 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 512 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 522 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████▊            | 532 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████            | 542 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 552 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████▉           | 563 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▏          | 573 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▋          | 583 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 593 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▎         | 604 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▊         | 614 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 624 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▌        | 634 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▉        | 645 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▏       | 655 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▋       | 665 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 675 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▍      | 686 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▊      | 696 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▏     | 706 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▌     | 716 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▉     | 727 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▎    | 737 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▋    | 747 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 757 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▍   | 768 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▊   | 778 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▏  | 788 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▌  | 798 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████  | 808 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▎ | 819 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▋ | 829 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 839 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▍| 849 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▉| 860 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 865 kB 4.3 MB/s \n",
            "\u001b[?25hInstalling collected packages: pyfiglet\n",
            "Successfully installed pyfiglet-0.8.post1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SNXKhb5XXqF4"
      },
      "source": [
        "There are *hundreds of thousands* of python libraries at your disposal. Some may suit your needs better than others depending on the goals of your scripts or applications. The [PyPi Repository](https://https://pypi.org/) contains a serchable database of packages that are installable via the pip package manager.\n",
        "\n",
        "Run the code below to get an idea of the number of packages that are included for your user within Colab. You don't need to know what all of these do, but it should indicate that python is a very powerful language."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C7A8viiJXiDs"
      },
      "source": [
        "pip list"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zopYZ3PcY6hR"
      },
      "source": [
        "If you would like to see if pyfiglet was installed, you could scan the list above, or you could **pipe** the output of `pip list` to a console command known as `grep` that will filter for specific strings. This is an example of **redirecting output,** which you have learned about already.\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oAMcMjbLZMIE",
        "outputId": "227b3e7e-22f3-4140-cda1-b1f4dee7e6ae",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "pip list | grep pyfiglet "
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "pyfiglet                      0.8.post1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gt5dp771Yc2c"
      },
      "source": [
        "# Writing Our Script"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Hh36394HaB3g"
      },
      "source": [
        "The intention of this Colab introduction is to get you familiar with using google Colab to accomplish scripting goals. Today, we will be using the `pyfiglet` library we have just installed to output some text. To understand the methods available to us in `pyfiglet` we can look up [the github repository.](https://github.com/pwaller/pyfiglet)\n",
        "\n",
        "***Remember: Since open source packages are at the mercy of their developers or maintainers, comprehensive documentation is never a guarantee.***\n",
        "\n",
        "The help documentation outlines a command line `--help` argument, which means that documentation exists. We can't call command line arguments for imported libraries in colab, but we *can* accomplish the same goal in colab by using the python `help([Object])` function."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zR6mZpfkgRxd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fb20216e-bc8c-44ba-f005-455e432a8236"
      },
      "source": [
        "from pyfiglet import Figlet\n",
        "\n",
        "f = Figlet()\n",
        "font = f.getFonts()\n",
        "for font in font:\n",
        "  print(font)\n"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "pyramid\n",
            "lcd\n",
            "xcourbi\n",
            "chartr\n",
            "shadow\n",
            "banner3\n",
            "fbr1____\n",
            "xtimes\n",
            "starwars\n",
            "italic\n",
            "characte\n",
            "letter_w\n",
            "radical_\n",
            "xcourb\n",
            "rad_____\n",
            "threepoint\n",
            "utopiai\n",
            "lexible_\n",
            "runic\n",
            "xhelvbi\n",
            "sbooki\n",
            "fender\n",
            "tec_7000\n",
            "rot13\n",
            "rok_____\n",
            "relief\n",
            "clr5x8\n",
            "rad_phan\n",
            "charact1\n",
            "moscow\n",
            "gauntlet\n",
            "trek\n",
            "eftipiti\n",
            "tsalagi\n",
            "clb8x8\n",
            "maxfour\n",
            "letterw3\n",
            "chunky\n",
            "p_s_h_m_\n",
            "sansbi\n",
            "xsbooki\n",
            "char3___\n",
            "master_o\n",
            "platoon2\n",
            "smisome1\n",
            "os2\n",
            "bubble_b\n",
            "courb\n",
            "caligraphy\n",
            "charact5\n",
            "sbookbi\n",
            "devilish\n",
            "xbriteb\n",
            "char4___\n",
            "inc_raw_\n",
            "catwalk\n",
            "bubble\n",
            "druid___\n",
            "platoon_\n",
            "faces_of\n",
            "sketch_s\n",
            "rowancap\n",
            "b_m__200\n",
            "big\n",
            "xbritebi\n",
            "rastan__\n",
            "fbr_tilt\n",
            "yie-ar__\n",
            "c2______\n",
            "tinker-toy\n",
            "phonix__\n",
            "finalass\n",
            "mshebrew210\n",
            "sbookb\n",
            "graceful\n",
            "fp1_____\n",
            "xchartr\n",
            "slide\n",
            "e__fist_\n",
            "nancyj\n",
            "cli8x8\n",
            "smshadow\n",
            "zone7___\n",
            "defleppard\n",
            "poison\n",
            "etcrvs__\n",
            "5x8\n",
            "alligator\n",
            "f15_____\n",
            "britebi\n",
            "fbr2____\n",
            "mnemonic\n",
            "spc_demo\n",
            "tomahawk\n",
            "raw_recu\n",
            "xchartri\n",
            "future_4\n",
            "caus_in_\n",
            "cour\n",
            "64f1____\n",
            "tengwar\n",
            "eftiwall\n",
            "smscript\n",
            "calgphy2\n",
            "stencil1\n",
            "taxi____\n",
            "rally_s2\n",
            "helvb\n",
            "wavy\n",
            "xttyb\n",
            "utopiab\n",
            "slscript\n",
            "timesofl\n",
            "mirror\n",
            "future_5\n",
            "term\n",
            "xsbookbi\n",
            "xcouri\n",
            "pawp\n",
            "ucf_fan_\n",
            "fairligh\n",
            "clr5x10\n",
            "rectangles\n",
            "type_set\n",
            "p_skateb\n",
            "skate_ro\n",
            "eftifont\n",
            "nipples\n",
            "letters\n",
            "cybersmall\n",
            "pebbles\n",
            "5lineoblique\n",
            "space_op\n",
            "eftichess\n",
            "rainbow_\n",
            "pawn_ins\n",
            "tsn_base\n",
            "chartri\n",
            "future_8\n",
            "char2___\n",
            "decimal\n",
            "charact4\n",
            "diamond\n",
            "charact3\n",
            "clr7x10\n",
            "larry3d\n",
            "helvbi\n",
            "katakana\n",
            "fraktur\n",
            "home_pak\n",
            "rally_sp\n",
            "goofy\n",
            "street_s\n",
            "high_noo\n",
            "charset_\n",
            "assalt_m\n",
            "xsansbi\n",
            "top_duck\n",
            "pepper\n",
            "weird\n",
            "stampatello\n",
            "avatar\n",
            "cosmic\n",
            "modern__\n",
            "bubble__\n",
            "trashman\n",
            "rampage_\n",
            "morse\n",
            "epic\n",
            "sans\n",
            "roman___\n",
            "baz__bil\n",
            "ti_pan__\n",
            "smkeyboard\n",
            "script\n",
            "war_of_w\n",
            "asc_____\n",
            "xtty\n",
            "doh\n",
            "ntgreek\n",
            "stencil2\n",
            "twopoint\n",
            "future_1\n",
            "basic\n",
            "green_be\n",
            "gothic__\n",
            "ripper!_\n",
            "panther_\n",
            "fp2_____\n",
            "relief2\n",
            "mini\n",
            "tecrvs__\n",
            "banner4\n",
            "mig_ally\n",
            "tubular\n",
            "clr4x6\n",
            "straight\n",
            "fantasy_\n",
            "future_3\n",
            "convoy__\n",
            "triad_st\n",
            "a_zooloo\n",
            "stop\n",
            "xsbook\n",
            "asslt__m\n",
            "octal\n",
            "fbr_stri\n",
            "runyc\n",
            "rockbox_\n",
            "linux\n",
            "banner\n",
            "c_ascii_\n",
            "house_of\n",
            "skateord\n",
            "c_consen\n",
            "broadway\n",
            "acrobatic\n",
            "charact2\n",
            "stealth_\n",
            "xhelv\n",
            "ticks\n",
            "stacey\n",
            "standard\n",
            "demo_2__\n",
            "odel_lak\n",
            "usa_pq__\n",
            "atc_____\n",
            "mayhem_d\n",
            "tombstone\n",
            "subteran\n",
            "isometric1\n",
            "clr7x8\n",
            "crawford\n",
            "ghost_bo\n",
            "helv\n",
            "xhelvi\n",
            "krak_out\n",
            "usa_____\n",
            "mad_nurs\n",
            "peaks\n",
            "univers\n",
            "doom\n",
            "cybermedium\n",
            "fair_mea\n",
            "block\n",
            "pod_____\n",
            "rci_____\n",
            "kik_star\n",
            "utopiabi\n",
            "mcg_____\n",
            "clr6x10\n",
            "nancyj-underlined\n",
            "gothic\n",
            "brite\n",
            "ugalympi\n",
            "cyberlarge\n",
            "xsbookb\n",
            "lockergnome\n",
            "contessa\n",
            "clb8x10\n",
            "invita\n",
            "future_7\n",
            "yie_ar_k\n",
            "rev\n",
            "alligator2\n",
            "twin_cob\n",
            "coil_cop\n",
            "outrun__\n",
            "gradient\n",
            "tav1____\n",
            "rounded\n",
            "fireing_\n",
            "demo_m__\n",
            "cursive\n",
            "bulbhead\n",
            "6x9\n",
            "star_war\n",
            "sblood\n",
            "3-d\n",
            "magic_ma\n",
            "tty\n",
            "charact6\n",
            "clr6x6\n",
            "skateroc\n",
            "z-pilot_\n",
            "xcour\n",
            "demo_1__\n",
            "o8\n",
            "future_2\n",
            "char1___\n",
            "alphabet\n",
            "eftitalic\n",
            "notie_ca\n",
            "grand_pr\n",
            "joust___\n",
            "slant\n",
            "atc_gran\n",
            "script__\n",
            "road_rai\n",
            "double\n",
            "eftirobot\n",
            "beer_pub\n",
            "r2-d2___\n",
            "1943____\n",
            "briteb\n",
            "tiles\n",
            "advenger\n",
            "5x7\n",
            "thin\n",
            "ogre\n",
            "stellar\n",
            "hex\n",
            "hypa_bal\n",
            "roman\n",
            "fourtops\n",
            "hills___\n",
            "computer\n",
            "utopia\n",
            "bell\n",
            "greek\n",
            "future_6\n",
            "ttyb\n",
            "couri\n",
            "ticksslant\n",
            "fuzzy\n",
            "com_sen_\n",
            "hyper___\n",
            "clr5x6\n",
            "ebbs_2__\n",
            "small\n",
            "hades___\n",
            "shimrod\n",
            "xbrite\n",
            "barbwire\n",
            "kban\n",
            "xbritei\n",
            "funky_dr\n",
            "smtengwar\n",
            "usaflag\n",
            "mike\n",
            "xsansb\n",
            "xhelvb\n",
            "fbr12___\n",
            "dcs_bfmo\n",
            "xsans\n",
            "whimsy\n",
            "helvi\n",
            "battlesh\n",
            "unarmed_\n",
            "sbook\n",
            "6x10\n",
            "vortron_\n",
            "clr8x8\n",
            "drpepper\n",
            "flyn_sh\n",
            "cosmike\n",
            "britei\n",
            "sansi\n",
            "smslant\n",
            "lean\n",
            "tanja\n",
            "battle_s\n",
            "c1______\n",
            "digital\n",
            "colossal\n",
            "nfi1____\n",
            "kgames_i\n",
            "short\n",
            "pacos_pe\n",
            "aquaplan\n",
            "coinstak\n",
            "isometric2\n",
            "banner3-D\n",
            "lazy_jon\n",
            "eftiwater\n",
            "new_asci\n",
            "cricket\n",
            "nvscript\n",
            "zig_zag_\n",
            "tec1____\n",
            "graffiti\n",
            "3x5\n",
            "jazmine\n",
            "ts1_____\n",
            "rozzo\n",
            "contrast\n",
            "xsansi\n",
            "dwhistled\n",
            "serifcap\n",
            "ok_beer_\n",
            "marquee\n",
            "arrows\n",
            "ebbs_1__\n",
            "ascii___\n",
            "t__of_ap\n",
            "heroboti\n",
            "super_te\n",
            "clb6x10\n",
            "times\n",
            "nancyj-fancy\n",
            "eca_____\n",
            "deep_str\n",
            "heavy_me\n",
            "hollywood\n",
            "ivrit\n",
            "npn_____\n",
            "tsm_____\n",
            "speed\n",
            "thick\n",
            "binary\n",
            "sm______\n",
            "bigchief\n",
            "clr8x10\n",
            "isometric4\n",
            "puffy\n",
            "clr6x8\n",
            "4x4_offr\n",
            "courbi\n",
            "dotmatrix\n",
            "italics_\n",
            "jerusalem\n",
            "isometric3\n",
            "sansb\n",
            "d_dragon\n",
            "madrid\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UxKlfQJrmq4N"
      },
      "source": [
        "Using this function we can see that the `Figlet` object has several methods available. This will bring us to your task:\n",
        "\n",
        "\n",
        "**In the editor below, finish a script that accomplishes the following goals:**\n",
        "\n",
        "1.   Prompt the user to select from a list of 5 fonts.\n",
        "2.   Prompt the user to input the string they would like output in that font.\n",
        "3.   Render the text using the selected font.\n",
        "\n",
        "*Hint:* Call the `getFonts()` method to get a list of the available fonts."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b2y8sufRoEpR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 130
        },
        "outputId": "70cac2e9-c7a0-4f81-eb48-e402fd1ab884"
      },
      "source": [
        "from pyfiglet import Figlet\n",
        "\n",
        "#Instantiate a Figlet Object\n",
        "figlet = Figlet()\n",
        "#font1 = f.setfont(font='madrid')\n",
        "#font2 = Figlet(font='sansb')\n",
        "#font3 = Figlet('puffy')\n",
        "#font4 = Figlet('binary')\n",
        "#Prompt the user to select a font\n",
        "print(\"The fonts are: madrid : sansb : puffy : binary\")\n",
        "\n",
        "\n",
        "#set the font\n",
        "selectedFont = input(\"Please type in the font:  \")\n",
        "if selectedFont == \"madrid\":\n",
        "  print(\"madrid has been selected. Please type in the text you want to change\")\n",
        "  \n",
        "  message = input(\" \")\n",
        "  f.setFont(font=\"madrid\" )\n",
        "  print(f.renderText(message))\n",
        "\n",
        "if selectedFont == \"sansb\":\n",
        "  print(\"sansb has been selected. Please type in the text you want to change\")\n",
        "    \n",
        "  message2 = input(\" \")\n",
        "  f.setFont(font=\"sansb\")\n",
        "  print(f.renderText(message2))\n",
        "\n",
        "if selectedFont == \"puffy\":\n",
        "  print(\"puffy has been selceted. Please type in the text you wish to change\")\n",
        "\n",
        "  message3 = input(\" \")\n",
        "  f.setFont(font=\"puffy\")\n",
        "  print(f.renderText(message3))\n",
        "\n",
        "if selectedFont == \"binary\":\n",
        "  print(\"binary has been selected. Please type the text you want to change\")\n",
        "\n",
        "  message4 = input(\" \")\n",
        "  f.setFont(font=\"binary\")\n",
        "  print(f.renderText(message4))\n",
        "\n",
        "  \n",
        "#Prompt the user to type a message\n",
        "\n",
        "\n",
        "\n",
        "# print the message"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-42-854663bc5cc7>\"\u001b[0;36m, line \u001b[0;32m43\u001b[0m\n\u001b[0;31m    elif:\u001b[0m\n\u001b[0m       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wXiyORkQqUfz"
      },
      "source": [
        "# Submitting your Script"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eUMXNhytqZY6"
      },
      "source": [
        "Once you have succesfully completed your script, make sure to save it to your github account. (Take a look [at the official colab instructions](https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb) if you need a refresher.)"
      ]
    }
  ]
}